# -*- coding: utf-8 -*-
"""coursera data analysis1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XiF9Zng8ethMPmSqAsMk5jqjxH6D7VXl
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

data = pd.read_csv('coursea_data.csv')

# Overall Dataset
data

# Top 5 Results of Datset
data.head()

# Top 10 Results of Dataset
data.head(10)

# Below 5 Results of Dataset
data.tail()

# Below 10 Results of Dataset
data.tail(10)

course = data['course_title']
certificate = data['course_Certificate_type']
rating = data['course_rating']
difficulty = data['course_difficulty']
enroll = data['course_students_enrolled']
organization = data['course_organization']

course

certificate

rating

difficulty

organization

enroll

# analysis of course vs certification type
plt.xlabel('Course')
plt.ylabel('Certification Type')
plt.scatter(certificate.head(10), course.head(10))

# analysis of course vs certification type
plt.xlabel('Course')
plt.ylabel('Certification Type')
plt.scatter(certificate.tail(10), course.tail(10))

# analysis of course vs rating
plt.xlabel('Rating')
plt.ylabel('Course')
plt.scatter(rating.head(10), course.head(10))

# analysis of course vs rating
plt.xlabel('Rating')
plt.ylabel('Course')
plt.scatter(rating.tail(10), course.tail(10))

# analysis of course vs difficulty level
plt.xlabel('Difficulty')
plt.ylabel('Course')
plt.scatter(difficulty.head(10), course.head(10))

# analysis of course vs difficulty level
plt.xlabel('Difficulty')
plt.ylabel('Course')
plt.scatter(difficulty.tail(10), course.tail(10))

# analysis of course vs enrollment
plt.xlabel('Enrollment')
plt.ylabel('Course')
plt.scatter(enroll.head(10), course.head(10))

# analysis of course vs enrollment
plt.xlabel('Enrollment')
plt.ylabel('Course')
plt.scatter(enroll.tail(10), course.tail(10))

# analysis of certification vs organization
plt.xlabel('Certification')
plt.ylabel('Organization')
plt.scatter(certificate.head(10), organization.head(10))

# analysis of certification vs organization
plt.xlabel('Certification')
plt.ylabel('Organization')
plt.scatter(certificate.tail(10), organization.tail(10))

# analysis of organization vs rating
plt.xlabel('Rating')
plt.ylabel('Organization')
plt.scatter(rating.head(10), organization.head(10))

# analysis of organization vs rating
plt.xlabel('Rating')
plt.ylabel('Organization')
plt.scatter(rating.tail(10), organization.tail(10))

# analysis of organization vs difficulty
plt.xlabel('Difficulty')
plt.ylabel('Organization')
plt.scatter(difficulty.head(10), organization.head(10))

# analysis of organization vs difficulty
plt.xlabel('Difficulty')
plt.ylabel('Organization')
plt.scatter(difficulty.tail(10), organization.tail(10))

# analysis of organization vs enrollment
plt.xlabel('Enrollment')
plt.ylabel('Organization')
plt.scatter(enroll.head(10), organization.head(10))

# analysis of organization vs enrollment
plt.xlabel('Enrollment')
plt.ylabel('Organization')
plt.scatter(enroll.tail(10), organization.tail(10))

# analysis of certificate vs rating
plt.xlabel('Certificate')
plt.ylabel('Rating')
plt.scatter(certificate.head(10), rating.head(10))

# analysis of certificate vs rating
plt.xlabel('Certificate')
plt.ylabel('Rating')
plt.scatter(certificate.tail(10), rating.tail(10))

# analysis of certificate vs difficulty level
plt.xlabel('Certificate')
plt.ylabel('Difficulty')
plt.scatter(certificate.head(10), difficulty.head(10))

# analysis of certificate vs enrollment
plt.xlabel('Certificate')
plt.ylabel('Enrollment')
plt.scatter(certificate.head(10), enroll.head(10))

# analysis of certificate vs enrollment
plt.xlabel('Certificate')
plt.ylabel('Enrollment')
plt.scatter(certificate.tail(10), enroll.tail(10))

# Only Beginner Courses
beg_courses = data[data['course_difficulty'] == 'Beginner']
beg_courses

# Only Intermediate Courses
int_courses = data[data['course_difficulty'] == 'Intermediate']
int_courses

# Only Intermediate Courses
mix_courses = data[data['course_difficulty'] == 'Mixed']
mix_courses

tbeg_courses = len(beg_courses)
tint_courses = len(int_courses)
tmix_courses = len(mix_courses)

tbeg_courses

tint_courses

tmix_courses

# Analysis of Difficulty level and Rating
plt.xlabel('Difficulty')
plt.ylabel('Rating')
plt.scatter(difficulty.head(10), rating.head(10))

# Analysis of Difficulty level and Rating
plt.xlabel('Difficulty')
plt.ylabel('Rating')
plt.scatter(difficulty.tail(10), rating.tail(10))

# Analysis of Difficulty level and Enrollment
plt.xlabel('Difficulty')
plt.ylabel('Enrollment')
plt.scatter(difficulty.head(10), enroll.head(10))

# Analysis of Difficulty level and Enrollment
plt.xlabel('Difficulty')
plt.ylabel('Enrollment')
plt.scatter(difficulty.tail(10), enroll.tail(10))

# Beginner Course have highest rating
beg_course_rating = max(beg_courses['course_rating'])
beg_course_rating

# Intermediate Course have highest rating
int_course_rating = max(int_courses['course_rating'])
int_course_rating

# Mixed Course have highest rating
mix_course_rating = max(mix_courses['course_rating'])
mix_course_rating

# Beginner Course have highest enrollments
beg_course_enrollment = max(beg_courses['course_students_enrolled'])
beg_course_enrollment

# Intermediate Course have highest enrollments
int_course_enrollment = max(int_courses['course_students_enrolled'])
int_course_enrollment

# Mixed Course have highest enrollments
mix_course_enrollment = max(mix_courses['course_students_enrolled'])
mix_course_enrollment

# Beginner Course have lowest rating
beg_course_rating1 = min(beg_courses['course_rating'])
beg_course_rating1

# Intermediate Course have lowest rating
int_course_rating1 = min(int_courses['course_rating'])
int_course_rating1

# Mixed Course have lowest rating
mix_course_rating1 = min(mix_courses['course_rating'])
mix_course_rating1

# Beginner Course have lowest enrollments
beg_course_enrollment1 = min(beg_courses['course_students_enrolled'])
beg_course_enrollment1

# Intermediate Course have lowest enrollments
int_course_enrollment1 = min(int_courses['course_students_enrolled'])
int_course_enrollment1

# Mixed Course have lowest enrollments
mix_course_enrollment1 = min(mix_courses['course_students_enrolled'])
mix_course_enrollment1